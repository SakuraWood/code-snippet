记录git一些常用的命令：

1、设置name和Email

	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"


2、创建 版本库（repository）

	$ mkdir learngit    （创建空目录）
	$ cd learngit
	$ git init           （使空目录变成git可以管理的仓库）

3、添加文件到版本库

   （以添加readme.txt为例，readme.txt必须放在版本库目录或者子目录中）

	$ git add readme.txt     （用命令git add告诉Git，把文件添加到仓库）
	$ git commit -m "wrote a readme file" （用命令git commit告诉Git，把文件提交到仓库 -m后面输入的是本次提交的说明，可以输入任意内容）
	
	commit可以一次提交很多文件，所以你可以多次add不同的文件,然后一次commit
4、时光机穿梭（查看修改）

	git status 命令可以让我们时刻掌握仓库当前的状态（不会展示具体修改内容）
	git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以查看具体的修改

5、查看修改记录及版本回退

	版本控制系统使用 $ git log 告诉我们历史记录 (如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数)(看到的一大串类似3628164...882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。)
	版本回退使用 $ git reset --hard HEAD^  (用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100)
	$ git reset --hard “commit id” 可以回到任意版本（只需要对应版本号的前几位就可以了）
	$ git reflog 可以查看命令历史，可以看到对应版本的操作及commit id 所以不要慌
	
6、工作区、缓存区、当前分支

    在工作区对文件进行了修改，然后git add file.txt 会将修改添加到缓存区；git commit 会把缓存区中的修改提交到分支中   如果在工作区做了修改但是没有添加到缓存区，是不会提交到分支的
    对一个文件进行了多次修改，需要每次修改后都git add 一次

7、取消修改
	
	$ git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销,让这个文件回到最近一次git commit或git add时的状态,git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
	命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区;git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本

8、删除文件

	直接在文件管理器中把没用的文件删了，或者用rm命令删
	现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本，$ git checkout -- test.txt   ；git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
	